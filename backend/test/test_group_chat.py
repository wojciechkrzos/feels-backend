# Test generated by Claude 4!!!
"""
Test for group chat functionality with 3 users
Tests the complete flow: user creation -> authentication -> group chat creation -> messaging
"""
import requests
import json
import time
from config import BASE_URL

def test_group_chat_workflow():
    print("💬 Testing Group Chat Workflow with 3 Users")
    print("=" * 60)
    
    # Step 1: Create User 1 (Alice)
    print("\n👤 Step 1: Creating User 1 (Alice)...")
    user1_data = {
        "username": "alice_chat",
        "email": "alice1@example.com",
        "password": "testpass123",
        "display_name": "Alice Johnson",
        "bio": "Love chatting with friends!"
    }
    
    response = requests.post(f'{BASE_URL}/accounts/', json=user1_data)
    if response.status_code == 201:
        user1_info = response.json()
        user1_uid = user1_info['uid']
        print(f"✅ Alice created successfully!")
        print(f"   UID: {user1_uid}")
        print(f"   Username: {user1_info['username']}")
    else:
        print(f"❌ Failed to create Alice: {response.status_code}")
        print(f"   Response: {response.text}")
        return False
    
    # Step 2: Create User 2 (Bob)
    print("\n👤 Step 2: Creating User 2 (Bob)...")
    user2_data = {
        "username": "bob_chat", 
        "email": "bob1@example.com",
        "password": "testpass123",
        "display_name": "Bob Smith",
        "bio": "Always ready for a good conversation"
    }
    
    response = requests.post(f'{BASE_URL}/accounts/', json=user2_data)
    if response.status_code == 201:
        user2_info = response.json()
        user2_uid = user2_info['uid']
        print(f"✅ Bob created successfully!")
        print(f"   UID: {user2_uid}")
        print(f"   Username: {user2_info['username']}")
    else:
        print(f"❌ Failed to create Bob: {response.status_code}")
        print(f"   Response: {response.text}")
        return False
    
    # Step 3: Create User 3 (Charlie)
    print("\n👤 Step 3: Creating User 3 (Charlie)...")
    user3_data = {
        "username": "charlie_chat",
        "email": "charlie1@example.com",
        "password": "testpass123",
        "display_name": "Charlie Brown",
        "bio": "Loves group discussions"
    }
    
    response = requests.post(f'{BASE_URL}/accounts/', json=user3_data)
    if response.status_code == 201:
        user3_info = response.json()
        user3_uid = user3_info['uid']
        print(f"✅ Charlie created successfully!")
        print(f"   UID: {user3_uid}")
        print(f"   Username: {user3_info['username']}")
    else:
        print(f"❌ Failed to create Charlie: {response.status_code}")
        print(f"   Response: {response.text}")
        return False
    
    # Step 4: Authenticate all users
    print("\n🔐 Step 4: Authenticating all users...")
    
    # Authenticate Alice
    auth_data1 = {
        "action": "login",
        "username": "alice_chat",
        "password": "testpass123"
    }
    
    response = requests.post(f'{BASE_URL}/auth/', json=auth_data1)
    if response.status_code == 200:
        user1_token = response.json().get('token')
        user1_headers = {'Authorization': f'Bearer {user1_token}'}
        print("✅ Alice authenticated successfully!")
    else:
        print(f"❌ Failed to authenticate Alice: {response.status_code}")
        return False
    
    # Authenticate Bob
    auth_data2 = {
        "action": "login",
        "username": "bob_chat",
        "password": "testpass123"
    }
    
    response = requests.post(f'{BASE_URL}/auth/', json=auth_data2)
    if response.status_code == 200:
        user2_token = response.json().get('token')
        user2_headers = {'Authorization': f'Bearer {user2_token}'}
        print("✅ Bob authenticated successfully!")
    else:
        print(f"❌ Failed to authenticate Bob: {response.status_code}")
        return False
    
    # Authenticate Charlie
    auth_data3 = {
        "action": "login",
        "username": "charlie_chat",
        "password": "testpass123"
    }
    
    response = requests.post(f'{BASE_URL}/auth/', json=auth_data3)
    if response.status_code == 200:
        user3_token = response.json().get('token')
        user3_headers = {'Authorization': f'Bearer {user3_token}'}
        print("✅ Charlie authenticated successfully!")
    else:
        print(f"❌ Failed to authenticate Charlie: {response.status_code}")
        return False
    
    # Step 5: Create some feelings for messages
    print("\n😊 Step 5: Creating some feelings for our chat...")
    feelings_data = [
        {"name": "Excited", "color": "#FF6B35", "description": "Feeling excited and energetic"},
        {"name": "Happy", "color": "#FFD23F", "description": "Feeling happy and content"},
        {"name": "Thoughtful", "color": "#7B68EE", "description": "Feeling thoughtful and contemplative"}
    ]
    
    for feeling_data in feelings_data:
        response = requests.post(f'{BASE_URL}/feelings/', json=feeling_data)
        if response.status_code == 201:
            print(f"✅ Created feeling: {feeling_data['name']}")
        else:
            print(f"⚠️  Feeling {feeling_data['name']} might already exist")
    
    # Step 6: Alice creates a group chat
    print("\n💬 Step 6: Alice creates a group chat with Bob and Charlie...")
    group_chat_data = {
        "participant_usernames": ["bob_chat", "charlie_chat"],
        "name": "Weekend Plans Discussion",
        "is_group_chat": True
    }
    
    response = requests.post(f'{BASE_URL}/chats/', json=group_chat_data, headers=user1_headers)
    if response.status_code == 201:
        chat_info = response.json()
        chat_id = chat_info['uid']
        print(f"✅ Group chat created successfully!")
        print(f"   Chat ID: {chat_id}")
        print(f"   Chat Name: {chat_info['name']}")
        print(f"   Participants: {len(chat_info['participants'])} members")
        print(f"   Is Group Chat: {chat_info['is_group_chat']}")
    else:
        print(f"❌ Failed to create group chat: {response.status_code}")
        print(f"   Response: {response.text}")
        return False
    
    # Step 7: Simulate conversation
    print(f"\n🗣️  Step 7: Starting group conversation...")
    print("=" * 50)
    
    # Alice starts the conversation
    print("\n💬 Alice: Hey everyone! Ready for our weekend plans?")
    message1_data = {
        "text": "Hey everyone! Ready for our weekend plans?",
        "message_type": "text",
        "feeling_name": "Excited"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message1_data, headers=user1_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
        if msg_info.get('feeling'):
            print(f"   😊 Feeling: {msg_info['feeling']['name']} {msg_info['feeling']['color']}")
    else:
        print(f"❌ Failed to send Alice's message: {response.status_code}")
    
    time.sleep(1)  # Small delay to simulate real conversation timing
    
    # Bob responds
    print("\n💬 Bob: Absolutely! I've been looking forward to this all week.")
    message2_data = {
        "text": "Absolutely! I've been looking forward to this all week.",
        "message_type": "text",
        "feeling_name": "Happy"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message2_data, headers=user2_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
        if msg_info.get('feeling'):
            print(f"   😊 Feeling: {msg_info['feeling']['name']} {msg_info['feeling']['color']}")
    else:
        print(f"❌ Failed to send Bob's message: {response.status_code}")
    
    time.sleep(1)
    
    # Charlie joins in
    print("\n💬 Charlie: Me too! What do you guys have in mind?")
    message3_data = {
        "text": "Me too! What do you guys have in mind?",
        "message_type": "text",
        "feeling_name": "Thoughtful"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message3_data, headers=user3_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
        if msg_info.get('feeling'):
            print(f"   😊 Feeling: {msg_info['feeling']['name']} {msg_info['feeling']['color']}")
    else:
        print(f"❌ Failed to send Charlie's message: {response.status_code}")
    
    time.sleep(1)
    
    # Alice suggests activities
    print("\n💬 Alice: How about we go hiking in the morning and have a picnic lunch?")
    message4_data = {
        "text": "How about we go hiking in the morning and have a picnic lunch?",
        "message_type": "text"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message4_data, headers=user1_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
    else:
        print(f"❌ Failed to send Alice's message: {response.status_code}")
    
    time.sleep(1)
    
    # Bob agrees enthusiastically
    print("\n💬 Bob: That sounds perfect! I'll bring my camera for some nature photos.")
    message5_data = {
        "text": "That sounds perfect! I'll bring my camera for some nature photos.",
        "message_type": "text",
        "feeling_name": "Excited"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message5_data, headers=user2_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
        if msg_info.get('feeling'):
            print(f"   😊 Feeling: {msg_info['feeling']['name']} {msg_info['feeling']['color']}")
    else:
        print(f"❌ Failed to send Bob's message: {response.status_code}")
    
    time.sleep(1)
    
    # Charlie offers to bring food
    print("\n💬 Charlie: Great idea! I can prepare some sandwiches and snacks for the picnic.")
    message6_data = {
        "text": "Great idea! I can prepare some sandwiches and snacks for the picnic.",
        "message_type": "text",
        "feeling_name": "Happy"
    }
    
    response = requests.post(f'{BASE_URL}/chats/{chat_id}/messages/', 
                           json=message6_data, headers=user3_headers)
    if response.status_code == 201:
        msg_info = response.json()
        print(f"✅ Message sent! (ID: {msg_info['uid']})")
        if msg_info.get('feeling'):
            print(f"   😊 Feeling: {msg_info['feeling']['name']} {msg_info['feeling']['color']}")
    else:
        print(f"❌ Failed to send Charlie's message: {response.status_code}")
    
    # Step 8: Test message retrieval
    print(f"\n📋 Step 8: Retrieving chat messages...")
    response = requests.get(f'{BASE_URL}/chats/{chat_id}/messages/', headers=user1_headers)
    if response.status_code == 200:
        messages_data = response.json()
        print(f"✅ Successfully retrieved {messages_data['count']} messages")
        print(f"   Total messages in chat: {messages_data['total_count']}")
        print(f"   Has more messages: {messages_data['has_more']}")
        
        print("\n📜 Complete Conversation History:")
        print("-" * 40)
        # Messages are returned newest first, so reverse for chronological order
        for message in reversed(messages_data['messages']):
            sender = message['sender']['display_name']
            text = message['text']
            timestamp = message['created_at']
            feeling = message.get('feeling')
            
            feeling_str = ""
            if feeling:
                feeling_str = f" [{feeling['name']}]"
            
            print(f"[{timestamp[:19]}] {sender}{feeling_str}: {text}")
    else:
        print(f"❌ Failed to retrieve messages: {response.status_code}")
        print(f"   Response: {response.text}")
    
    # Step 9: Test chat listing for each user
    print(f"\n📋 Step 9: Testing chat listing for each user...")
    
    for user_name, headers in [("Alice", user1_headers), ("Bob", user2_headers), ("Charlie", user3_headers)]:
        print(f"\n🔍 {user_name}'s chat list:")
        response = requests.get(f'{BASE_URL}/chats/', headers=headers)
        if response.status_code == 200:
            chats_data = response.json()
            print(f"   ✅ {user_name} has {chats_data['count']} chat(s)")
            for chat in chats_data['chats']:
                print(f"      - {chat['name']} (ID: {chat['uid'][:8]}...)")
                print(f"        Participants: {', '.join(chat['participants'])}")
                print(f"        Messages: {chat['message_count']}, Unread: {chat['unread_count']}")
        else:
            print(f"   ❌ Failed to get {user_name}'s chats: {response.status_code}")
    
    # Step 10: Test marking messages as read
    print(f"\n✅ Step 10: Testing mark messages as read (Bob's perspective)...")
    response = requests.get(f'{BASE_URL}/chats/{chat_id}/messages/?mark_as_read=true', 
                          headers=user2_headers)
    if response.status_code == 200:
        print("✅ Bob marked messages as read successfully")
    else:
        print(f"❌ Failed to mark messages as read: {response.status_code}")
    
    # Step 11: Get specific chat details
    print(f"\n📋 Step 11: Getting detailed chat information...")
    response = requests.get(f'{BASE_URL}/chats/{chat_id}/', headers=user1_headers)
    if response.status_code == 200:
        chat_details = response.json()
        print(f"✅ Chat details retrieved successfully:")
        print(f"   Name: {chat_details['name']}")
        print(f"   Is Group Chat: {chat_details['is_group_chat']}")
        print(f"   Created: {chat_details['created_at']}")
        print(f"   Last Message: {chat_details['last_message_at']}")
        print(f"   Total Messages: {chat_details['message_count']}")
        print(f"   Participants: {len(chat_details['participants'])}")
        for participant in chat_details['participants']:
            print(f"      - {participant['display_name']} (@{participant['username']})")
    else:
        print(f"❌ Failed to get chat details: {response.status_code}")
    
    print("\n🎉 Group Chat Test Completed Successfully!")
    print("=" * 60)
    print("✅ All features tested:")
    print("   - User creation and authentication")
    print("   - Group chat creation")
    print("   - Multi-user messaging")
    print("   - Feeling integration")
    print("   - Message retrieval and pagination")
    print("   - Chat listing")
    print("   - Mark as read functionality")
    print("   - Chat details retrieval")
    
    return True

def test_error_scenarios():
    """Test various error scenarios for the chat system"""
    print("\n⚠️  Testing Error Scenarios...")
    print("=" * 40)
    
    # Test unauthenticated access
    print("\n🔒 Testing unauthenticated access...")
    response = requests.get(f'{BASE_URL}/chats/')
    if response.status_code == 401:
        print("✅ Correctly blocked unauthenticated access to chats")
    else:
        print(f"❌ Unexpected response for unauthenticated access: {response.status_code}")
    
    # Test invalid chat ID
    print("\n🔍 Testing invalid chat ID...")
    # Create a dummy authenticated user for this test
    user_data = {
        "username": "error_test_user",
        "email": "error@example.com",
        "password": "testpass123",
        "display_name": "Error Test User"
    }
    
    response = requests.post(f'{BASE_URL}/accounts/', json=user_data)
    if response.status_code == 201:
        # Authenticate
        auth_data = {
            "action": "login",
            "username": "error_test_user",
            "password": "testpass123"
        }
        
        response = requests.post(f'{BASE_URL}/auth/', json=auth_data)
        if response.status_code == 200:
            token = response.json().get('token')
            headers = {'Authorization': f'Bearer {token}'}
            
            # Test invalid chat ID
            response = requests.get(f'{BASE_URL}/chats/invalid_chat_id/', headers=headers)
            if response.status_code == 404:
                print("✅ Correctly returned 404 for invalid chat ID")
            else:
                print(f"❌ Unexpected response for invalid chat ID: {response.status_code}")
            
            # Test sending message to invalid chat
            message_data = {"text": "This should fail"}
            response = requests.post(f'{BASE_URL}/chats/invalid_chat_id/messages/', 
                                   json=message_data, headers=headers)
            if response.status_code == 404:
                print("✅ Correctly blocked message to invalid chat")
            else:
                print(f"❌ Unexpected response for message to invalid chat: {response.status_code}")
    
    print("✅ Error scenario testing completed!")

if __name__ == "__main__":
    print("🚀 Starting Group Chat Test Suite")
    print("Make sure your Django server is running on localhost:8000")
    print("=" * 60)
    
    try:
        # Run main test
        success = test_group_chat_workflow()
        
        if success:
            # Run error scenario tests
            test_error_scenarios()
            
            print("\n🎯 All tests completed successfully!")
            print("Your group chat functionality is working perfectly! 🎉")
        else:
            print("\n❌ Main test failed. Check the output above for details.")
            
    except KeyboardInterrupt:
        print("\n\n⏹️  Test interrupted by user")
    except Exception as e:
        print(f"\n❌ Test failed with exception: {str(e)}")
        import traceback
        traceback.print_exc()
